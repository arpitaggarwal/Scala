{"name":"Scala","tagline":"Scala","body":"## Scala.Any\r\n* **Class Any is the root of the Scala class hierarchy**. Every class in a Scala execution environment inherits directly or \r\n  indirectly from this class.\r\n* Starting with Scala 2.10 it is possible to directly extend Any using universal traits. A universal trait is a trait that \r\n  extends Any, only has defs as members, and does no initialization.\r\n* The superclass of all classes **scala.Any has two direct subclasses scala.AnyVal and scala.AnyRef** representing two \r\n  different class worlds: **value classes and reference classes**.\r\n* All value classes are predefined; they correspond to the primitive types of Java-like languages. \r\n* All other classes define reference types. User-defined classes define reference types by default; i.e. they always  \r\n  (indirectly) subclass scala.AnyRef. \r\n* Every user-defined class in Scala implicitly extends the trait scala.ScalaObject. Classes from the infrastructure on \r\n  which Scala is running (e.g. the Java runtime environment) do not extend scala.ScalaObject. If Scala is used in the \r\n  context of a Java runtime environment, then scala.AnyRef corresponds to java.lang.Object.\r\n\r\n## Scala.AnyVal\r\n* AnyVal is the root class of all value types, which describe values not implemented as objects in the underlying host system.\r\n* The standard implementation includes nine AnyVal subtypes:\r\n     scala.Double, scala.Float, scala.Long, scala.Int, scala.Char, scala.Short, and scala.Byte are the numeric value types.\r\n     scala.Unit and scala.Boolean are the non-numeric value types.\r\n* Prior to Scala 2.10, AnyVal was a sealed trait. Beginning with Scala 2.10, however, it is possible to define a subclass \r\n  of AnyVal called a user-defined value class which is treated specially by the compiler. Properly-defined user value \r\n  classes provide a way to improve performance on user-defined types by avoiding object allocation at runtime, and by \r\n  replacing virtual method invocations with static method invocations.\r\n\r\nUser-defined value classes which avoid object allocation.\r\n* must have a single val parameter that is the underlying runtime representation.\r\n* can define defs, but no vals, vars, or nested traitss, classes or objects.\r\n* typically extend no other trait apart from AnyVal.\r\n* cannot be used in type tests or pattern matching.\r\n* may not override equals or hashCode methods.\r\nA minimal example:\r\n``` scala\r\nclass Wrapper(val underlying: Int) extends AnyVal {\r\n  def foo: Wrapper = new Wrapper(underlying * 19)\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}